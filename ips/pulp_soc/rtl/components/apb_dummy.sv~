// Copyright 2018 ETH Zurich and University of Bologna.
// Copyright and related rights are licensed under the Solderpad Hardware
// License, Version 0.51 (the "License"); you may not use this file except in
// compliance with the License.  You may obtain a copy of the License at
// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
// or agreed to in writing, software, hardware and materials distributed under
// this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

//Dummy register in the APB domain for TEACHING PURPOSES

`define REG_SIGNATURE   4'h0 //BASEADDR+0x00 CONTAINS A READ-ONLY Signature
`define REG_SCRATCH     4'h4 //BASEADDR+0x04 R/W REGISTER AS SCRATCH
`define REG_PMU_TRIG    4'h8 //BASEADDR+0x08 TRIGGER WAKEUP COUNTER

module apb_dummy_registers
#(
    parameter APB_ADDR_WIDTH = 12  // APB slaves are 4KB by default
)
(
  input  logic                      HCLK,
  input  logic                      HRESETn,
  input  logic [APB_ADDR_WIDTH-1:0] PADDR,
  input  logic               [31:0] PWDATA,
  input  logic                      PWRITE,
  input  logic                      PSEL,
  input  logic                      PENABLE,
  output logic               [31:0] PRDATA,
  output logic                      PREADY,
  output logic                      PSLVERR,
  input  logic                      ref_clk_i,
  input  logic                      rstn_i,
  output logic                      power_o
);


   logic s_apb_write;
   logic [3:0] s_apb_addr;
   logic [31:0] reg_signature;
   logic [31:0] reg_scratch;
   logic reg_pmu_en;
   logic [5:0] loopcount;
   logic one_sec, power_on;
   logic [31:0] sec_count; 

   assign s_apb_write = PSEL && PENABLE && PWRITE;

   assign s_apb_addr = PADDR[3:0]; //check whether it is REG_SIGNATURE or REG_SCRATCH

   assign reg_signature = 24'hDA41DE;


/*COMPLETE THE WRITE LOGIC*/

    // write data
    always_ff @(posedge HCLK, negedge HRESETn)
    begin
      if(~HRESETn) begin
        reg_scratch  <= 1'b0;
        reg_pmu_en   <= 1'b0;
      end
      else
      begin
        if (s_apb_write)
        begin
          if (s_apb_addr == `REG_SCRATCH)
            reg_scratch <= PWDATA;
          else if (s_apb_addr == `REG_PMU_TRIG)
            reg_pmu_en <= PWDATA;
        end
      end
    end

/*COMPLETE THE READ LOGIC*/

    // read data
    always_comb
    begin
        PRDATA = '0;
        case (s_apb_addr)
          `REG_SIGNATURE : begin
            PRDATA = reg_signature;
          end
          `REG_SCRATCH : begin
            PRDATA = reg_scratch;
          end
          `REG_PMU_TRIG : begin
            PRDATA = reg_pmu_en;
          end
          default: begin
            PRDATA = '0;
          end
        endcase
    end

   assign PREADY     = 1'b1;
   assign PSLVERR    = 1'b0;

/* Wake up counter logic */

   assign one_sec = loopcount[5];
   assign power_o = (~reg_pmu_en) || power_on;

   always_ff @(posedge ref_clk_i, negedge rstn_i)
   begin
     if (~rstn_i)
       loopcount <= '0;
     else
       if (~reg_pmu_en)
         loopcount <= '0;
       else
         loopcount <= loopcount + 1;
   end   

   always_ff @(posedge ref_clk_i, negedge rstn_i)
   begin
     if (~rstn_i) begin
       sec_count <= '0;
       power_on <= '0;
     end else begin
       if (reg_pmu_en) begin
         if (sec_count == reg_scratch) begin
           power_on <= 1;
         end else begin
           if (one_sec) begin
             sec_count <= sec_count + 1;
             power_on <= 0;
           end
         end
       end else begin
         power_on <= 0;
       end
     end
   end

endmodule
